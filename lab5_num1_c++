#include <iostream>
#include <vector>

using namespace std;

void solveTridiagonal(const vector<double>& a, const vector<double>& b, const vector<double>& c, const vector<double>& d, vector<double>& x) {
    int n = d.size();
    vector<double> cp(n - 1), dp(n);

    cp[0] = c[0] / b[0];
    dp[0] = d[0] / b[0];

    for (int i = 1; i < n - 1; ++i) {
        double denom = b[i] - a[i - 1] * cp[i - 1];
        cp[i] = c[i] / denom;
        dp[i] = (d[i] - a[i - 1] * dp[i - 1]) / denom;
    }
    dp[n - 1] = (d[n - 1] - a[n - 2] * dp[n - 2]) / (b[n - 1] - a[n - 2] * cp[n - 2]);

    x[n - 1] = dp[n - 1];
    for (int i = n - 2; i >= 0; --i) {
        x[i] = dp[i] - cp[i] * x[i + 1];
    }
}

void cubicSpline(const vector<double>& x, const vector<double>& y, double x_star) {
    int n = x.size() - 1;
    vector<double> h(n), alpha(n), l(n + 1), mu(n), z(n + 1), a(y), b(n), c(n + 1), d(n);

    for (int i = 0; i < n; ++i) {
        h[i] = x[i + 1] - x[i];
    }

    for (int i = 1; i < n; ++i) {
        alpha[i] = 3 / h[i] * (y[i + 1] - y[i]) - 3 / h[i - 1] * (y[i] - y[i - 1]);
    }

    l[0] = 1;
    mu[0] = z[0] = 0;

    for (int i = 1; i < n; ++i) {
        l[i] = 2 * (x[i + 1] - x[i - 1]) - h[i - 1] * mu[i - 1];
        mu[i] = h[i] / l[i];
        z[i] = (alpha[i] - h[i - 1] * z[i - 1]) / l[i];
    }

    l[n] = 1;
    z[n] = c[n] = 0;

    for (int j = n - 1; j >= 0; --j) {
        c[j] = z[j] - mu[j] * c[j + 1];
        b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] + 2 * c[j]) / 3;
        d[j] = (c[j + 1] - c[j]) / (3 * h[j]);
        a[j] = y[j];
    }

    // Finding the interval where x_star lies
    int idx = -1;
    for (int i = 0; i < n; ++i) {
        if (x_star >= x[i] && x_star <= x[i + 1]) {
            idx = i;
            break;
        }
    }

    if (idx != -1) {
        double dx = x_star - x[idx];
        double result = a[idx] + b[idx] * dx + c[idx] * dx * dx + d[idx] * dx * dx * dx;
        cout << "Value of the function at x* = " << x_star << ": " << result << endl;
    } else {
        cout << "x* is out of the range of provided x values." << endl;
    }
}

int main() {
    vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0};
    vector<double> y = {0.0, 0.5, 0.86603, 1.0, 0.86603};
    double x_star = 1.5;
    cubicSpline(x, y, x_star);
    return 0;
}
