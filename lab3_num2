import numpy as np

def f(x):
    return np.exp(-2 * x) * np.sin(24 * x)

def rectangle_method(f, a, b, n):
    h = (b - a) / n
    result = 0
    for i in range(n):
        result += f(a + i * h)
    return result * h

def trapezoid_method(f, a, b, n):
    h = (b - a) / n
    result = (f(a) + f(b)) / 2
    for i in range(1, n):
        result += f(a + i * h)
    return result * h

def simpson_method(f, a, b, n):
    if n % 2:
        n += 1  # Ensure that n is even
    h = (b - a) / n
    result = f(a) + f(b)
    for i in range(1, n, 2):
        result += 4 * f(a + i * h)
    for i in range(2, n-1, 2):
        result += 2 * f(a + i * h)
    return result * h / 3

a = 0
b = 10  # Approximate infinity
n = 100000  # Number of sub-intervals

integral_rectangle = rectangle_method(f, a, b, n)
print(f"Rectangle Method: {integral_rectangle:.6f}")

integral_trapezoid = trapezoid_method(f, a, b, n)
print(f"Trapezoid Method: {integral_trapezoid:.6f}")

integral_simpson = simpson_method(f, a, b, n)
print(f"Simpson's Method: {integral_simpson:.6f}")
